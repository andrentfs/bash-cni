#!/bin/bash -e

if [[ ${DEBUG} -gt 0 ]]; then set -x; fi

exec 3>&1 # make stdout available as fd 3 for the result
exec &>> /var/log/bash-cni-plugin.log

IP_STORE=/tmp/reserved_ips # all reserved ips will be stored there

echo "CNI command: $CNI_COMMAND" 
echo "CNI_NETNS=$CNI_NETNS"
echo "CNI_CONTAINERID=$CNI_CONTAINERID"
echo "CNI_IFNAME=$CNI_IFNAME"
echo "CNI_ARGS=$CNI_ARGS"
echo "CNI_PATH=$CNI_PATH"

stdin=`cat /dev/stdin`
echo "stdin: $stdin"

case $CNI_COMMAND in
ADD)
	network=$(echo "$stdin" | jq -r ".network")
	subnet=$(echo "$stdin" | jq -r ".subnet")
	myname=$(echo "$stdin" | jq -r ".name")
	subnet_mask_size=$(echo $subnet | awk -F  "/" '{print $2}')

    echo "network=$network subnet=$subnet subnet_mask_size=$subnet_mask_size name=$myname"

    echo "`date`: step 0"
	gw_ip=$(echo "$subnet" | awk -F"/" '{print $1}' | sed -e "s/0$/1/; t")
	container_ip=$(echo "{\"cniVersion\": \"0.3.1\", \"type\": \"bash-cni\", \"name\": \"$myname\", \"ipam\": { \"type\": \"host-local\", \"subnet\": \"$subnet\" }}" | CNI_COMMAND=ADD CNI_CONTAINERID="$CNI_CONTAINERID" CNI_NETNS="$CNI_NETNS" CNI_IFNAME="$CNI_IFNAME" CNI_PATH="$CNI_PATH" /opt/cni/bin/host-local | jq -r '.ips[].address' | awk -F"/" '{print $1}')
        echo $container_ip 

	mkdir -p /var/run/netns/
	ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID
	rand1=$(tr -dc 'A-F0-9' < /dev/urandom | head -c4)
	rand2=$(tr -dc 'A-F0-9' < /dev/urandom | head -c4)
	host_if_name="veth$rand1"
	guest_if_name="veth$rand2"
    echo "`date`: step 1"
	ip link add $guest_if_name type veth peer name $host_if_name 

    echo "`date`: step 2"
	ip link set $guest_if_name netns $CNI_CONTAINERID

    echo "`date`: step 3"
    ip netns exec $CNI_CONTAINERID ip link set dev $guest_if_name down
    ip netns exec $CNI_CONTAINERID ip link set dev $guest_if_name name $CNI_IFNAME
    ip netns exec $CNI_CONTAINERID ip link set dev $CNI_IFNAME up

    echo "`date`: step 4"
	ip link set $host_if_name up 

    echo "`date`: step 5"
	ip link set $host_if_name master cni0 

    echo "`date`: step 6"
	ip netns exec $CNI_CONTAINERID ip addr add $container_ip/$subnet_mask_size dev $CNI_IFNAME

    echo "`date`: step 7"
	ip netns exec $CNI_CONTAINERID ip route add default via $gw_ip dev $CNI_IFNAME 

	mac=$(ip netns exec $CNI_CONTAINERID ip link show eth0 | awk '/ether/ {print $2}')
echo "{
  \"cniVersion\": \"0.3.1\",
  \"interfaces\": [                                            
      {
          \"name\": \"eth0\",
          \"mac\": \"$mac\",                            
          \"sandbox\": \"$CNI_NETNS\" 
      }
  ],
  \"ips\": [
      {
          \"version\": \"4\",
          \"address\": \"$container_ip/$subnet_mask_size\",
          \"gateway\": \"$gw_ip\",          
          \"interface\": 0 
      }
  ]
}" >&3

    echo "`date`: step 8"

    # These steps could be moved outside of cni later
    mount bpffs /sys/fs/bpf -t bpf
    ulimit -l unlimited
    /opt/cni/xdp/xdp-loader load -p /sys/fs/bpf/$host_if_name -s xdp_stats $host_if_name /opt/cni/xdp/xdp_kern.o 

;;

DEL)
	dirname=$(echo "$stdin" | jq -r ".name")
	tmpdir=/var/lib/cni/networks/$dirname
	ip=$(ip netns exec $CNI_CONTAINERID ip addr show eth0 | awk '/inet / {print $2}' | sed  s%/.*%% || echo "")
	if [ ! -z "$ip" ]
	then
		rm "$tmpdir"/"$ip"
	fi
;;

GET)
	echo "GET not supported"
	exit 1
;;

VERSION)
echo '{
  "cniVersion": "0.3.1", 
  "supportedVersions": [ "0.3.0", "0.3.1", "0.4.0" ] 
}' >&3
;;

*)
  echo "Unknown cni commandn: $CNI_COMMAND" 
  exit 1
;;

esac
